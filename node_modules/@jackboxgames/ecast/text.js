class TextEntity {
    constructor(options) {
        this.from = options.from;
        this.key = options.key;
        this.text = options.text;
        this.version = options.version;
        this.meta = options.meta || {};

        if (options.acl) {
            this.acl = options.acl;
        }
    }

    whenReceived(client) {
        client.entities[this.key] = this;
        client.emit('text ' + this.key, this);
    }

    toString() {
        return `TextEntity{\n\tkey: ${this.key}\n\ttext: ${this.text}\n\tmeta:${JSON.stringify(this.meta)}\n}`;
    }

    // toBlob converts the TextEntity value to a "blob" as it was used in
    // blobcast.
    toBlob() {
        return JSON.parse(this.text);
    }
}

class TextEcho {
    constructor(options) {
        this.message = options.message;
    }

    toString() {
        return `TextEcho{\n\tkey: ${this.key}\n\tmessage: ${this.message}\n}`;
    }
}

module.exports = {
    TextEntity,
    TextEcho,
};
