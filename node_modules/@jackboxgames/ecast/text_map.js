class TextMapEntity {
    constructor(options) {
        this.from = options.from;
        this.key = options.key;
        this.meta = options.meta || {};
        // todo: should we even store root? it'll fall out of sync
        this.root = options.root;

        if (options.acl) {
            this.acl = options.acl;
        }
    }

    whenReceived(client) {
        client.entities[this.key] = this;
    }

    toString() {
        // todo: what's the most valuable thing to print here???
        return `TextMap{\n\tkey:${this.key}\n\tmeta:${JSON.stringify(this.meta)}\n}`;
    }
}

class TextMapSynced {
    constructor(options) {
        this.from = options.from;
        this.key = options.key;
        this.msg = options.msg;
    }

    toString() {
        const raw = this.msg ? this.msg.join(', ') : this.msg;
        return `TextMapSynced{\n\tkey:${this.key}\n\tfrom:${this.from}\n\tmsg:${raw}\n}`;
    }
}

 class TextMapState {
    constructor(options) {
        this.from = options.from;
        this.key = options.key;
        this.text = options.text;
        this.attributions = options.attributions;
    }

    toString() {
        return `TextMapState{\n\tkey: ${this.key}\n\tfrom:${this.from}\n\ttext:${this.text}\n\tattributions:${this.attributions}\n}`;
    }
 }

module.exports = {
    TextMapEntity,
    TextMapSynced,
    TextMapState,
};
