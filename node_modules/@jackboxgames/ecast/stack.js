class StackEntity {
    constructor(options) {
        this.key = options.key;
        this.size = options.size;
        this.version = options.version;
        this.from = options.from;
        this.meta = options.meta || {};
        
        if (options.acl) {
            this.acl = options.acl;
        }
    }

    whenRecived(client) {
        client.entities[this.key] = this;
    }

    toString() { return `Stack{\n\tkey:${this.key}\n\tsize:${this.size}\n\tversion:${this.version}\n\tfrom:${this.from}\n\tmeta:${this.meta}\n}`; }
}

class StackElement {
    constructor(options) {
        this.key = options.key;
        this.val = options.val;
    }

    toString() {
        return `StackElement{\n\tkey:${this.key}\n\tvalue: ${JSON.stringify(this.val)}\n}`;
    }
}

class StackElements {
    constructor(options) {
        this.key = options.key;
        this.vals = options.vals;
    }

    toString() {
        return `StackElements{\n\tkey:${this.key}\n\tvalues: ${JSON.stringify(this.vals)}\n}`;
    }
}

module.exports = {
    StackEntity,
    StackElement,
    StackElements,
};
