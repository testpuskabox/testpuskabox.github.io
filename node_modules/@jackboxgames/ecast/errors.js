////////////////////////////////////////////////////////////////////////////////
//
//                           .aMMMb  .aMMMb  dMMMMb  dMMMMMP
//                          dMP"VMP dMP"dMP dMP VMP dMP
//                         dMP     dMP dMP dMP dMP dMMMP
//                        dMP.aMP dMP.aMP dMP.aMP dMP
//                        VMMMP"  VMMMP" dMMMMP" dMMMMMP
//
//       .aMMMMP dMMMMMP dMMMMb  dMMMMMP dMMMMb  .aMMMb dMMMMMMP dMMMMMP dMMMMb
//      dMP"    dMP     dMP dMP dMP     dMP.dMP dMP"dMP   dMP   dMP     dMP VMP
//     dMP MMP"dMMMP   dMP dMP dMMMP   dMMMMK" dMMMMMP   dMP   dMMMP   dMP dMP
//    dMP.dMP dMP     dMP dMP dMP     dMP"AMF dMP dMP   dMP   dMP     dMP.aMP
//    VMMMP" dMMMMMP dMP dMP dMMMMMP dMP dMP dMP dMP   dMP   dMMMMMP dMMMMP"
//
//
//  This code was generated by a code-generation program. It was NOT written by
//  hand. Do not edit this file by hand! Your edits will be destroyed!
//
//  This file was generated by cain, a program that generates error types in
//  different programming languages based on shared error definitions.
//
////////////////////////////////////////////////////////////////////////////////

class ObservedError {
    constructor(options) {
        if (options) {
            this.error = options.error;
            this.to = options.to;
            this.opcode = options.opcode;
        }
    }

    toString() {
        return `ObservedError{\n\tto:${this.to}\n\terror:${this.error}\n\topcode:${this.opcode}\n}`;
    }
}

class CallError extends Error {
    constructor(options) {
        super(options);

        if (options) {
            this.code = options.code;
            this.message = options.message;
        }
    }
}

class EcastServerError extends CallError {
    constructor(options) {
        super(options);

        this.code = 1000;
        this.message = (options && options.message) ? options.message : "ecast server error";
    }
}


class EcastCreateRoomFailed extends EcastServerError {
    constructor(options) {
        super(options);

        this.code = 1001;
        this.message = (options && options.message) ? options.message : "create room failed";
    }
}


class EcastDialRoomFailed extends EcastServerError {
    constructor(options) {
        super(options);

        this.code = 1002;
        this.message = (options && options.message) ? options.message : "unable to connect to room";
    }
}


class EcastServerIsShuttingDown extends EcastServerError {
    constructor(options) {
        super(options);

        this.code = 1003;
        this.message = (options && options.message) ? options.message : "server is shutting down";
    }
}



class EcastClientError extends CallError {
    constructor(options) {
        super(options);

        this.code = 2000;
        this.message = (options && options.message) ? options.message : "ecast client error";
    }
}


class EcastParseError extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2001;
        this.message = (options && options.message) ? options.message : "parse error in ecast protocol";
    }
}


class EcastRequestIsMissingOpcode extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2002;
        this.message = (options && options.message) ? options.message : "missing opcode";
    }
}


class EcastRequestHasInvalidOpcode extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2003;
        this.message = (options && options.message) ? options.message : "invalid opcode";
    }
}


class EcastRequestHasInvalidArguments extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2004;
        this.message = (options && options.message) ? options.message : "invalid arguments";
    }
}


class EcastEntityNotFound extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2005;
        this.message = (options && options.message) ? options.message : "entity not found";
    }
}


class EcastEntityAlreadyExists extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2006;
        this.message = (options && options.message) ? options.message : "an entity already exists with that key";
    }
}


class EcastEntityTypeError extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2007;
        this.message = (options && options.message) ? options.message : "the entity is not of the expected type";
    }
}


class EcastNoSuchClient extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2008;
        this.message = (options && options.message) ? options.message : "no such client";
    }
}


class EcastRoomIsLocked extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2009;
        this.message = (options && options.message) ? options.message : "room is locked";
    }
}


class EcastRoomIsFull extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2010;
        this.message = (options && options.message) ? options.message : "room is full";
    }
}


class EcastLicenseNotFound extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2011;
        this.message = (options && options.message) ? options.message : "no such license";
    }
}


class EcastLicenseCheckFailed extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2012;
        this.message = (options && options.message) ? options.message : "invalid license";
    }
}


class EcastRoomNotFound extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2013;
        this.message = (options && options.message) ? options.message : "room not found";
    }
}


class EcastInvalidRole extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2014;
        this.message = (options && options.message) ? options.message : "requested role does not exist";
    }
}


class EcastTwitchLoginRequired extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2015;
        this.message = (options && options.message) ? options.message : "twitch login required";
    }
}


class EcastInvalidOption extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2016;
        this.message = (options && options.message) ? options.message : "no such option";
    }
}


class EcastPasswordRequired extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2017;
        this.message = (options && options.message) ? options.message : "password required";
    }
}


class EcastInvalidPassword extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2018;
        this.message = (options && options.message) ? options.message : "invalid room password";
    }
}


class EcastNameRequired extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2019;
        this.message = (options && options.message) ? options.message : "missing name";
    }
}


class EcastFilterError extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2021;
        this.message = (options && options.message) ? options.message : "text did not pass text filters";
    }
}


class EcastNoSuchFilter extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2022;
        this.message = (options && options.message) ? options.message : "no such filter";
    }
}


class EcastPermissionDenied extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2023;
        this.message = (options && options.message) ? options.message : "permission denied";
    }
}


class EcastNotConnected extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2024;
        this.message = (options && options.message) ? options.message : "not connected to a room";
    }
}


class EcastIllegalOperation extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2025;
        this.message = (options && options.message) ? options.message : "illegal operation";
    }
}


class EcastACLChangeDenied extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2026;
        this.message = (options && options.message) ? options.message : "invalid ACL change";
    }
}


class EcastRoomHasEnded extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2027;
        this.message = (options && options.message) ? options.message : "room has already ended";
    }
}


class EcastEntityLocked extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2028;
        this.message = (options && options.message) ? options.message : "the entity is locked";
    }
}


class EcastRateLimitExceeded extends EcastClientError {
    constructor(options) {
        super(options);

        this.code = 2420;
        this.message = (options && options.message) ? options.message : "rate limit exceeded";
    }
}



function createError({code, message}) {
    const ErrorType = errors[code];

    if (!ErrorType) {
        return new CallError({message: message});
    }

    return new ErrorType({
        message: message
    });
}

module.exports = {
    createError,
    CallError,
    EcastServerError,
    EcastCreateRoomFailed,
    EcastDialRoomFailed,
    EcastServerIsShuttingDown,
    EcastClientError,
    EcastParseError,
    EcastRequestIsMissingOpcode,
    EcastRequestHasInvalidOpcode,
    EcastRequestHasInvalidArguments,
    EcastEntityNotFound,
    EcastEntityAlreadyExists,
    EcastEntityTypeError,
    EcastNoSuchClient,
    EcastRoomIsLocked,
    EcastRoomIsFull,
    EcastLicenseNotFound,
    EcastLicenseCheckFailed,
    EcastRoomNotFound,
    EcastInvalidRole,
    EcastTwitchLoginRequired,
    EcastInvalidOption,
    EcastPasswordRequired,
    EcastInvalidPassword,
    EcastNameRequired,
    EcastFilterError,
    EcastNoSuchFilter,
    EcastPermissionDenied,
    EcastNotConnected,
    EcastIllegalOperation,
    EcastACLChangeDenied,
    EcastRoomHasEnded,
    EcastEntityLocked,
    EcastRateLimitExceeded,
    ObservedError,
};

const errors = {
    1000: EcastServerError,
    1001: EcastCreateRoomFailed,
    1002: EcastDialRoomFailed,
    1003: EcastServerIsShuttingDown,
    2000: EcastClientError,
    2001: EcastParseError,
    2002: EcastRequestIsMissingOpcode,
    2003: EcastRequestHasInvalidOpcode,
    2004: EcastRequestHasInvalidArguments,
    2005: EcastEntityNotFound,
    2006: EcastEntityAlreadyExists,
    2007: EcastEntityTypeError,
    2008: EcastNoSuchClient,
    2009: EcastRoomIsLocked,
    2010: EcastRoomIsFull,
    2011: EcastLicenseNotFound,
    2012: EcastLicenseCheckFailed,
    2013: EcastRoomNotFound,
    2014: EcastInvalidRole,
    2015: EcastTwitchLoginRequired,
    2016: EcastInvalidOption,
    2017: EcastPasswordRequired,
    2018: EcastInvalidPassword,
    2019: EcastNameRequired,
    2021: EcastFilterError,
    2022: EcastNoSuchFilter,
    2023: EcastPermissionDenied,
    2024: EcastNotConnected,
    2025: EcastIllegalOperation,
    2026: EcastACLChangeDenied,
    2027: EcastRoomHasEnded,
    2028: EcastEntityLocked,
    2420: EcastRateLimitExceeded,
};

