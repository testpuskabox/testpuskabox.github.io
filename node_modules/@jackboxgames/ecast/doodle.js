class DoodleEntity {
    constructor(options) {
        this.key = options.key;
        this.colors = options.colors;
        this.lines = options.lines;
        this.live = options.live;
        this.maxLayer = options.maxLayer;
        this.maxPoints = options.maxPoints;
        this.size = options.size;
        this.weights = options.weights;
        this.meta = options.meta || {};

        if (options.acl) {
            this.acl = options.acl;
        }
    }

    whenReceived(client) {
        client.entities[this.key] = this;
    }

    toString() { return `Doodle{\n\tkey:${this.key}\n\tcolors:${this.colors}\n\tlines:${this.lines}\n\tlive:${this.live}\n\tmaxLayer:${this.maxLayer}\n\tmaxPoints:${this.maxPoints}\n\tsize:${this.size}\n\tweights:${this.weights}\n\tmeta:${JSON.stringify(this.meta)}\n}`; }
}

class DoodleLine {
    constructor(options) {
        this.key = options.key;
        this.line = options.line;
    }

    whenReceived(client) {
        client.entities[this.key].lines.push(this.line);
    }

    toString() { return `DoodleLine{\n\tval:${this.line}\n}`; }
}

class DoodleLineRemoved {
    constructor(options) {
        this.key = options.key;
        this.index = options.index;
    }

    whenReceived(client) {
        client.entities[this.key].lines.splice(this.index, 1);
    }

    toString() { return `DoodleLineRemoved{\n\tindex:${this.index}\n}`; }
}


module.exports = {
    DoodleEntity,
    DoodleLine,
    DoodleLineRemoved,
};