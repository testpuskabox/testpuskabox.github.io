const fetch = require('cross-fetch');
const qs = require('qs');
const { CreateRoomReply, GetRoomReply } = require('./room');

// APIClient is the preferred way of making API calls to ecast's HTTP API. We
// use the HTTP API for transactional requests that do not require an active
// websocket connection.
class APIClient {
    constructor(options) {
        if (!options.host) {
            throw new Error('unable to create ecast APIClient: no host provided');
        }
        this.host = options.host;
        if (!options.scheme) {
            throw new Error('unable to create ecast APIClient: no scheme provided');
        }
        this.scheme = options.scheme;
    }

    url(rel, q) {
        if (q) {
            let query = qs.stringify(q);
            return `${this.scheme}://${this.host}/api/v2${rel}?${query}`;
        }
        return `${this.scheme}://${this.host}/api/v2${rel}`;
    }

    async createRoom(options) {
        let queryParams = {
            appTag: 'test',
            userId: 'fart',
            ...options
        };

        let url = this.url('/rooms', queryParams);
        let fetchOptions = {method: 'POST'};
        let res = await fetch(url, fetchOptions);

        const { body, error, ok } = await res.json();
        if (!ok) {
            throw new Error(`failed to create room: ${error}`);
        }

        return new CreateRoomReply({
            code: body.code,
            token: body.token,
            host: body.host,
        });
    }

    async getRoom(options) {
        let url = this.url(`/rooms/${options.code}`);
        let res = await fetch(url);
        let data = await res.json();
        if (!data.ok) {
            throw new Error(`unable to get room with options ${JSON.stringify(options)}: ${data.error}`);
        }

        let body = data.body;
        return new GetRoomReply({
            appId: body.appId,
            appTag: body.appTag,
            audienceEnabled: body.audienceEnabled,
            code: body.code,
            host: body.host,
            audienceHost: body.audienceHost,
            locked: body.locked,
            full: body.full,
            maxPlayers: body.maxPlayers,
            minPlayers: body.minPlayers,
            moderationEnabled: body.moderationEnabled,
            passwordRequired: body.passwordRequired,
            twitchLocked: body.twitchLocked,
            locale: body.locale,
            keepalive: body.keepalive,
            controllerBranch: body.controllerBranch
        });
    }
}

module.exports = { APIClient };
